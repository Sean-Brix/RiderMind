// Prisma schema for RiderMind (MySQL)
// Run: npm run migrate (with DATABASE_URL in .env)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Personal Information
  last_name      String?
  first_name     String?
  middle_name    String?
  name_extension String?
  birthdate      DateTime?
  sex            String?
  nationality    Nationality?
  civil_status   CivilStatus?
  weight         Float?
  height         Float?
  blood_type     String?
  eye_color      String?

  // Address Information
  address_house_no           String?
  address_street             String?
  address_barangay           String?
  address_city_municipality  String?
  address_province           String?

  // Contact Information
  telephone_number  String?
  cellphone_number  String?
  email_address     String?

  // Emergency Contact
  emergency_contact_name         String?
  emergency_contact_relationship String?
  emergency_contact_number       String?

  // Vehicle Categories
  vehicle_categories  String? // Comma-separated, e.g. "A,B1,C"
}

enum Role {
  USER
  ADMIN
}

enum Nationality {
  Filipino
  American
  Chinese
  Japanese
  Korean
  Other
}

enum CivilStatus {
  Single
  Married
  Widowed
  Divorced
  Separated
}

// ==================== LEARNING MODULES ====================

model Module {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  isActive    Boolean  @default(false)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?
  updatedBy   Int?

  objectives    ModuleObjective[]
  slides        ModuleSlide[]

  @@index([position])
  @@index([isActive])
  @@map("modules")
}

model ModuleObjective {
  id          Int      @id @default(autoincrement())
  moduleId    Int
  objective   String   @db.VarChar(500)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@map("module_objectives")
}

model ModuleSlide {
  id          Int        @id @default(autoincrement())
  moduleId    Int
  type        SlideType
  title       String     @db.VarChar(255)
  content     String     @db.Text
  description String?    @db.VarChar(500)
  position    Int        @default(0)
  
  imageData   Bytes?
  imageMime   String?    @db.VarChar(50)
  videoPath   String?    @db.VarChar(500)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([position])
  @@map("module_slides")
}

enum SlideType {
  text
  image
  video
}
